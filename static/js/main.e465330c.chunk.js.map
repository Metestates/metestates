{"version":3,"sources":["reportWebVitals.ts","config/app-config.ts","hooks/use-screen-dimensions.ts","hooks/use-mousewheel-scalable.ts","hooks/use-controlled-coordinate.ts","hooks/use-token-balance.ts","utils/address.ts","components/TokenBalance/TokenBalance.tsx","components/ConnectToWalletButton/ConnectToWalletButton.tsx","queries/getBlockData.ts","utils/parcel.ts","components/CanvasParcelGrid/CanvasParcelGrid.tsx","constants/DAOContractAddress.ts","components/App/App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AppConfig","ParcelPixelWidth","ParcelPixelMinWidth","ParcelPixelMaxWidth","ParcelBlockWidth","ParcelsPerQuery","Origin","x","y","PanningStep","useScreenDimensions","React","width","window","innerWidth","height","innerHeight","screenDimensions","setScreenDimensions","onWindowResize","addEventListener","removeEventListener","clamp","value","min","Infinity","max","Math","useMousewheelScalable","initialValue","options","delta","scalableValue","setScalableValue","onMouseWheel","event","clampedValue","deltaY","minValue","maxValue","useControlledCoordinate","coord","coordinate","setCoordiante","onKeydown","step","key","useTokenBalance","tokenAddress","address","result","useCall","contract","Contract","ERC20Interface","method","args","undefined","error","balance","shortenAddress","length","slice","start","end","TokenBalance","token","formattedTokenBalance","formatUnits","decimals","className","diameter","seed","jsNumberForAddress","symbol","ConnectToWalletButton","activateBrowserWallet","useEthers","notifications","useNotifications","connectWallet","useCallback","console","log","useEffect","map","n","type","addr","onClick","e","getBlockDataQuery","gql","getBlockCoordinate","findParcel","block","parcels","find","p","parseInt","getBlockPromise","apolloClient","cache","blockCoordinate","promise","variables","first","xGte","xLt","yLte","yGt","blockKey","query","errorPolicy","CanvasParcelGrid","size","origin","parcelSize","_selectedParcel","selectedParcel","_setSelectedParcel","setSelectedParcel","canvasRef","useRef","originRef","parcelSizeRef","selectedParcelRef","setSelectedParcelRef","current","useState","context","setContext","useApolloClient","drawParcels","canvas","clearRect","rowCount","ceil","columnCount","rowIndex","columnIndex","capturedOrigin","capturedParcelSize","data","loading","JSON","stringify","parcel","color","estate","owner","r","g","b","a","desaturation","hasSameOwner","getParcelSaturation","luma","pixelX","pixelY","fillStyle","join","fillRect","drawParcelsRef","handleMouseMove","canvasX","pageX","currentTarget","offsetLeft","canvasY","pageY","offsetTop","atlasX","floor","atlasY","setTimeout","getContext","desynchronized","willReadFrequently","data-testid","ref","onMouseMove","css","position","top","left","right","bottom","zIndex","backgroundColor","cursor","App","parcelCellSize","account","name","getApolloClient","InMemoryCache","typePolicies","Parcel","keyFields","localForage","config","storeName","description","persistCache","maxSize","storage","LocalForageWrapper","client","ApolloClient","uri","dappProviderConfig","readOnlyChainId","ChainId","Mainnet","readOnlyUrls","ReactDOM","render","StrictMode","ApolloProvider","DAppProvider","document","getElementById","init"],"mappings":"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","file":"static/js/main.e465330c.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import Coordinate from '../types/coordinate'\n\nexport interface IAppConfig {\n\tParcelPixelWidth: number;\n\tParcelPixelMinWidth: number;\n\tParcelPixelMaxWidth: number;\n\tParcelBlockWidth: number,\n\tParcelsPerQuery: number,\n\tOrigin: Coordinate;\n\tPanningStep: number;\n}\n\n// @NOTE(mzalla) To call `api.thegraph.com`, we can only fetch up to a maximum\n// of 1,000 items per query; by choosing a large parcel block size (30), we get\n// close to 1,000 parcels per block query without going over this limit;\nconst ParcelBlockWidth = 30\n\nconst AppConfig: IAppConfig = {\n\tParcelPixelWidth: 16,\n\tParcelPixelMinWidth: 4,\n\tParcelPixelMaxWidth: 80,\n\tParcelBlockWidth,\n\tParcelsPerQuery: ParcelBlockWidth * ParcelBlockWidth,\n\t// Origin: { x: 0, y: 0 },\n\tOrigin: { x: -0, y: 0 },\n\tPanningStep: 1,\n}\n\nexport default AppConfig\n","import * as React from 'react'\n\nimport Dimensions from '../types/dimensions'\n\ntype UseScreenDimensionsHookResult = Dimensions\n\nconst useScreenDimensions = (): UseScreenDimensionsHookResult => {\n\n\tconst [screenDimensions, setScreenDimensions] = React.useState<Dimensions>({\n\t\twidth: window.innerWidth,\n\t\theight: window.innerHeight,\n\t})\n\n\tReact.useEffect(() => {\n\n\t\tfunction onWindowResize() {\n\t\t\tsetScreenDimensions({\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight,\n\t\t\t})\n\t\t}\n\n\t\twindow.addEventListener(`resize`, onWindowResize)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(`resize`, onWindowResize)\n\t\t}\n\n\t}, [\n\t\twindow.innerWidth,\n\t\twindow.innerHeight\n\t])\n\n\treturn screenDimensions\n\n}\n\nexport default useScreenDimensions\n","import * as React from 'react'\n\ninterface IUseMousewheelScalableOptions {\n\tdelta: number,\n\tminValue?: number,\n\tmaxValue?: number,\n}\n\nfunction clamp(\n\tvalue: number,\n\tmin: number = -Infinity,\n\tmax: number = Infinity): number\n{\n\treturn Math.max(\n\t\tmin || -Infinity,\n\t\tMath.min(value, max || Infinity)\n\t)\n}\n\nfunction useMousewheelScalable(\n\tinitialValue: number = 0,\n\toptions: IUseMousewheelScalableOptions = { delta: 1 })\n{\n\n\tconst [scalableValue, setScalableValue] = React.useState(initialValue)\n\n\tReact.useEffect(() => {\n\n\t\tfunction onMouseWheel(event: WheelEvent) {\n\n\t\t\tconst newValue = scalableValue + (event.deltaY < 0 ?\n\t\t\t\t-1 * options.delta :\n\t\t\t\toptions.delta)\n\n\t\t\tconst clampedValue = clamp(newValue, options.minValue, options.maxValue)\n\n\t\t\tsetScalableValue(clampedValue)\n\n\t\t}\n\n\t\twindow.addEventListener(`wheel`, onMouseWheel)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(`wheel`, onMouseWheel)\n\t\t}\n\n\t}, [scalableValue, setScalableValue])\n\n\treturn scalableValue\n\n}\n\nexport default useMousewheelScalable\n","import * as React from 'react'\n\nimport Coordinate from '../types/coordinate'\n\nimport AppConfig from '../config/app-config'\n\nfunction useControlledCoordinate(coord: Coordinate = { x: 0, y: 0 }) {\n\n\tconst [coordinate, setCoordiante] = React.useState(coord)\n\n\tReact.useEffect(() => {\n\n\t\tfunction onKeydown(event: KeyboardEvent) {\n\t\t\tconst step = AppConfig.PanningStep;\n\t\t\tconst delta: Coordinate = { x: 0, y: 0 }\n\n\t\t\tswitch (event.key) {\n\t\t\t\tcase `ArrowUp`:\n\t\t\t\t\tdelta.y = step\n\t\t\t\t\tbreak;\n\t\t\t\tcase `ArrowDown`:\n\t\t\t\t\tdelta.y = -step\n\t\t\t\t\tbreak;\n\t\t\t\tcase `ArrowLeft`:\n\t\t\t\t\tdelta.x = -step\n\t\t\t\t\tbreak;\n\t\t\t\tcase `ArrowRight`:\n\t\t\t\t\tdelta.x = step\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tsetCoordiante({\n\t\t\t\tx: coordinate.x + delta.x,\n\t\t\t\ty: coordinate.y + delta.y,\n\t\t\t})\n\t\t}\n\n\t\twindow.addEventListener(`keydown`, onKeydown)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(`keydown`, onKeydown)\n\t\t}\n\n\t}, [coordinate, setCoordiante])\n\n\treturn coordinate\n\n}\n\nexport default useControlledCoordinate\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\n\nimport {\n\tERC20Interface,\n\tuseCall,\n// useCall,\n\tuseContractCall,\n} from '@usedapp/core'\n\ntype UseTokenBalanceHookResult = [\n\tBigNumber|undefined,\n\tError|undefined,\n\tboolean,\n]\n\nconst useTokenBalance = (\n\ttokenAddress: string,\n\taddress?: string): UseTokenBalanceHookResult =>\n{\n\n\tlet result;\n\n\tresult = useCall(\n\t\taddress &&\n\t\t// {\n\t\t// \tabi: ERC20Interface,\n\t\t// \taddress: tokenAddress,\n\t\t// \tmethod: 'balanceOf',\n\t\t// \targs: [address],\n\t\t// }\n\t\t{\n\t\t\tcontract: new Contract(tokenAddress, ERC20Interface),\n\t\t\tmethod: 'balanceOf',\n\t\t\targs: [address],\n\t\t}\n\t)\n\n\tif(!address)\n\t{\n\t\treturn [undefined, undefined, true]\n\t}\n\n\tif(!result)\n\t{\n\t\treturn [undefined, undefined, false]\n\t}\n\n\tlet { value, error } = result\n\n\tif(error) {\n\t\treturn [undefined, error, false]\n\t}\n\n\tconst { balance } = value\n\n\treturn [balance, undefined, false]\n\n}\n\nexport default useTokenBalance\n","// See: https://github.com/MetaMask/metamask-extension/blob/develop/ui/helpers/utils/util.js#L207-L215\n\nconst TruncatedNameCharLimit = 11;\nconst TruncatedAddressStartChars = 5;\nconst TruncatedAddressEndChars = 4;\n\nexport const shortenAddress = (\n\taddress: string = '') =>\n{\n\n\tif(address.length < TruncatedNameCharLimit) {\n\t\treturn address\n\t}\n\n\tlet [start, end] = [\n\t\taddress.slice(0, TruncatedAddressStartChars),\n\t\taddress.slice(-TruncatedAddressEndChars),\n\t]\n\n\treturn `${start}…${end}`\n\n}\n","import React, { FC } from 'react';\n\nimport './TokenBalance.css';\n\nimport { formatUnits } from '@ethersproject/units'\n\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\n\nimport ITokenMetadata from '../../types/token';\n\nimport useTokenBalance from '../../hooks/use-token-balance'\n\nimport { shortenAddress } from '../../utils/address';\n\nimport './TokenBalance.css'\n\ntype TokenBalanceProps = {\n\ttoken: ITokenMetadata,\n\taddress: string,\n}\n\nconst TokenBalance: FC<TokenBalanceProps> = ({ token, address }) => {\n\n\tconst [balance, error, isLoading] = useTokenBalance(token.address, address)\n\n\tif(\n\t\tisLoading ||\n\t\t(\n\t\t\t!balance &&\n\t\t\t!error\n\t\t)\n\t) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>Loading…</p>\n\t\t\t</div>\n\t\t)\n\t}\n\n\tif(error) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>Error retreiving token balance: {error}</p>\n\t\t\t</div>\n\t\t)\n\t}\n\n\tlet formattedTokenBalance = formatUnits(balance!, token.decimals)\n\n\treturn (\n\t\t<div className='TokenBalance'>\n\t\t\t<div className=\"wrapper\">\n\t\t\t\t<div className='left'>\n\t\t\t\t\t<Jazzicon diameter={40} seed={jsNumberForAddress(address)} />\n\t\t\t\t</div>\n\t\t\t\t<div className='right'>\n\t\t\t\t\t<span>{shortenAddress(address)}</span>\n\t\t\t\t\t{\n\t\t\t\t\t\tbalance &&\n\t\t\t\t\t\t<span>{formattedTokenBalance} {token.symbol}</span>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n\n}\n\nexport default TokenBalance;\n","import React, { FC } from 'react'\n\nimport {\n\tuseEthers,\n\tuseNotifications,\n} from '@usedapp/core'\n\nimport './ConnectToWalletButton.css'\n\ntype ConnectToWalletButtonProps = {}\n\nconst ConnectToWalletButton: FC<ConnectToWalletButtonProps> = () => {\n\n\tconst { activateBrowserWallet } = useEthers()\n\n\tconst { notifications } = useNotifications()\n\n\tconst connectWallet = React.useCallback(\n\t\t() => {\n\n\t\t\t(activateBrowserWallet() as any).then(() => {\n\t\t\t\tconsole.log(`Connected to a new browser wallet…`)\n\t\t\t})\n\n\t\t},\n\t\t[activateBrowserWallet]\n\t)\n\n\tReact.useEffect(\n\t\t() => {\n\t\t\tnotifications.map(n => {\n\t\t\t\tswitch(n.type) {\n\t\t\t\t\tcase `walletConnected`:\n\n\t\t\t\t\t\tlet addr = n.address\n\n\t\t\t\t\t\tconsole.log(`Connected to wallet with address ${addr}.`)\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.log(n)\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t})\n\t\t},\n\t\t[notifications]\n\t)\n\n\treturn (\n\t\t<button className='ConnectToWalletButton'\n\t\t\tonClick={e => connectWallet()}>\n\t\t\tConnect Wallet\n\t\t</button>\n\t)\n\n}\n\nexport default ConnectToWalletButton\n","import { gql } from \"@apollo/client\";\n\n// See:\n//\n// https://thegraph.com/docs/developer/developer-faq#22-is-there-a-limit-\\\n//  to-how-many-objects-the-graph-can-return-per-query\n\nconst getBlockDataQuery = gql`\n\tquery GET_PARCEL_BLOCK(\n\t\t$first: Int,\n\t\t$xGte: BigInt\n\t\t$xLt: BigInt\n\t\t$yLte: BigInt\n\t\t$yGt: BigInt\n\t) {\n\t\tparcels(\n\t\t\tfirst: $first,\n\t\t\twhere: { x_gte: $xGte, x_lt: $xLt, y_lte: $yLte, y_gt: $yGt }\n\t\t) {\n\t\t\tid\n\t\t\t# tokenId\n\t\t\towner {\n\t\t\t\taddress\n\t\t\t}\n\t\t\tx\n\t\t\ty\n\t\t\t# data {\n\t\t\t# \tname\n\t\t\t# \tdescription\n\t\t\t# \tipns\n\t\t\t# }\n\t\t\testate {\n\t\t\t\t# id\n\t\t\t\t# tokenId\n\t\t\t\towner {\n\t\t\t\t\taddress\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\n\nexport default getBlockDataQuery\n","import Parcel from '../types/parcel'\n\nimport Color from '../types/color'\nimport Coordinate from '../types/coordinate'\n\nimport { DAOContractAddress } from '../constants/DAOContractAddress'\n\nimport { Block } from '../hooks/use-parcel-block'\n\nimport AppConfig from '../config/app-config'\n\nfunction address(parcel: Parcel) {\n\treturn (parcel.estate ? parcel.estate : parcel).owner.address\n}\n\nfunction short(address: string) {\n\treturn `${address.slice(0, 5)}…${address.slice(address.length - 4)}`\n}\n\nfunction getBlockCoordinate(\n\tx: number,\n\ty: number): Coordinate\n{\n\treturn {\n\t\t// x: Math.floor(x / AppConfig.ParcelBlockWidth),\n\t\t// y: Math.floor(y / AppConfig.ParcelBlockWidth),\n\t\tx: x - (x % AppConfig.ParcelBlockWidth),\n\t\ty: y - (y % AppConfig.ParcelBlockWidth),\n\t}\n}\n\nfunction findParcel(\n\tblock: Block,\n\tx: number,\n\ty: number): Parcel|undefined\n{\n\treturn block?.parcels.find(\n\t\tp => parseInt(p.x) === x && parseInt(p.y) === y\n\t)\n}\n\nfunction getParcelSaturation(\n\tparcel: Parcel,\n\tselectedParcel: Parcel|null): number\n{\n\tif(\n\t\tselectedParcel &&\n\t\thasSameOwner(parcel, selectedParcel) === false\n\t)\n\t{\n\t\treturn 0.05\n\t}\n\n\treturn 1.00\n}\n\nfunction getParcelColor(\n\tparcel: Parcel,\n\tselectedParcel: Parcel|null,\n\taddress: string): Color\n{\n\tif (address === DAOContractAddress) {\n\t\treturn [0, 0, 0, 255]\n\t}\n\n\t//    0            12           24           36\n\t// 0x 9a6ebe7e2a77 22f8200d0ffb 63a1f6406a0d 7dce\n\n\taddress = address.slice(2)\n\n\tlet r = parseInt(address.slice(0, 12), 16) % 256\n\tlet g = parseInt(address.slice(12, 24), 16) % 256\n\tlet b = parseInt(address.slice(24, 36), 16) % 256\n\tlet a = 255\n\n\treturn [r, g, b, a]\n}\n\nfunction hasSameOwner(\n\tparcel: Parcel,\n\tselectedParcel: Parcel): boolean\n{\n\n\tif (selectedParcel.estate || parcel.estate)\n\t{\n\t\tif(selectedParcel.estate && parcel.estate)\n\t\t{\n\t\t\tif(selectedParcel.estate.owner.address === parcel.estate.owner.address)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\telse if(selectedParcel.estate)\n\t\t{\n\t\t\tif(selectedParcel.estate.owner.address === parcel.owner.address)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\telse if(selectedParcel.owner.address === parcel.estate?.owner.address)\n\t\t{\n\t\t\treturn true\n\t\t}\n\t} else if (parcel.owner.address === selectedParcel.owner.address) {\n\t\treturn true\n\t}\n\n\treturn false\n\n}\n\nexport {\n\taddress,\n\tshort,\n\tgetParcelSaturation,\n\tgetParcelColor,\n\thasSameOwner,\n\tgetBlockCoordinate,\n\tfindParcel,\n}\n","import React, { FC } from 'react';\n\nimport { ApolloClient, useApolloClient } from '@apollo/client';\n\nimport { css } from '@emotion/css';\n\nimport Color from '../../types/color';\nimport Parcel from '../../types/parcel';\nimport Coordinate from '../../types/coordinate';\nimport Dimensions from '../../types/dimensions';\n\nimport AppConfig from '../../config/app-config';\n\nimport getBlockDataQuery from '../../queries/getBlockData';\n\nimport { BlockDataQueryVariables, BlockDataResult } from '../../hooks/use-parcel-block';\n\nimport {\n  address,\n  getParcelSaturation,\n  getParcelColor,\n  getBlockCoordinate,\n  findParcel\n} from '../../utils/parcel';\n\ntype BlockDataResultPromiseCache = {\n  [key: string]: Promise<BlockDataResult>\n}\n\nconst getBlockPromise = (\n  x: number,\n  y: number,\n  apolloClient: ApolloClient<object>,\n  cache: BlockDataResultPromiseCache): Promise<BlockDataResult> =>\n{\n\n  const blockCoordinate = getBlockCoordinate(x, y);\n\n  (window as any).getBlockCoordinate = getBlockCoordinate\n\n  const variables: BlockDataQueryVariables = {\n    first: AppConfig.ParcelsPerQuery,\n    xGte: blockCoordinate.x,\n    xLt: blockCoordinate.x + AppConfig.ParcelBlockWidth,\n    yLte: blockCoordinate.y,\n    yGt: blockCoordinate.y - AppConfig.ParcelBlockWidth,\n  }\n\n  let promise: Promise<BlockDataResult>;\n\n  let blockKey = `${blockCoordinate.x},${blockCoordinate.y}`\n\n  if(blockKey in cache)\n  {\n    promise = cache[blockKey]\n  }\n  else\n  {\n    promise = apolloClient.query({\n          query: getBlockDataQuery,\n          errorPolicy: `all`,\n          variables,\n          // context?: any;\n          // fetchPolicy?: FetchPolicy;\n          // pollInterval?: number;\n          // notifyOnNetworkStatusChange?: boolean;\n          // returnPartialData?: boolean;\n          // partialRefetch?: boolean;\n          // canonizeResults?: boolean;\n      })\n\n    cache[blockKey] = promise\n  }\n\n  return promise\n\n}\n\ntype CanvasParcelGridProps = React.PropsWithChildren<{\n  size: Dimensions;\n  origin: Coordinate;\n  parcelSize: number;\n  selectedParcel: Parcel|null;\n  setSelectedParcel: (value: Parcel|null) => void;\n}>\n\nconst CanvasParcelGrid: FC<CanvasParcelGridProps> = ({\n  size,\n  origin,\n  parcelSize,\n  selectedParcel: _selectedParcel,\n  setSelectedParcel: _setSelectedParcel,\n}) => {\n\n  const canvasRef = React.useRef<HTMLCanvasElement>(null)\n\n  const originRef = React.useRef<Coordinate>(origin)\n  const parcelSizeRef = React.useRef<number>(parcelSize)\n\n  const selectedParcelRef = React.useRef<Parcel|null>(_selectedParcel)\n  const setSelectedParcelRef = React.useRef<(parcel: Parcel|null) => void>(_setSelectedParcel)\n\n  React.useEffect(() => {\n    originRef.current = origin\n  }, [origin])\n\n  React.useEffect(() => {\n    parcelSizeRef.current = parcelSize\n  }, [parcelSize])\n\n  React.useEffect(() => {\n    selectedParcelRef.current = _selectedParcel\n  }, [_selectedParcel])\n\n  React.useEffect(() => {\n    setSelectedParcelRef.current = _setSelectedParcel\n  }, [_setSelectedParcel])\n\n  const [context, setContext] = React.useState<CanvasRenderingContext2D|null>(null)\n\n  const apolloClient = useApolloClient()\n\n  const cache: BlockDataResultPromiseCache  = {}\n\n  const drawParcels = React.useCallback(() => {\n\n    if(canvasRef.current === null || context === null)\n    {\n      return\n    }\n\n    const canvas = canvasRef.current\n\n    const { width, height } = canvas\n\n    context.clearRect(0, 0, width, height)\n\n    const rowCount = Math.ceil(size.height / parcelSize)\n    const columnCount = Math.ceil(size.width / parcelSize)\n\n    for(let rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n      for(let columnIndex = 0; columnIndex < columnCount; columnIndex++) {\n\n        let x = columnIndex + originRef.current.x\n        let y = originRef.current.y - rowIndex\n\n        let capturedOrigin = originRef.current\n        let capturedParcelSize = parcelSizeRef.current\n\n        getBlockPromise(x, y, apolloClient, cache)\n\n          .then(({ data: block, error, loading }: BlockDataResult) => {\n\n              if(JSON.stringify(capturedOrigin) !== JSON.stringify(originRef.current)) {\n                return;\n              }\n\n              if(capturedParcelSize !== parcelSizeRef.current) {\n                return;\n              }\n\n              let parcel: Parcel|undefined;\n\n              let color: Color = [0, 0, 0, 255];\n\n              if(loading) {\n\n                color = [248, 248, 255, 0.4]\n\n              } else if(error) {\n\n                color = [240, 128, 128, 0.4]\n\n              } else {\n\n                parcel = findParcel(block || { parcels: []}, x, y)\n\n                if(parcel)\n                {\n                  let [r, g, b, a] = getParcelColor(\n                    parcel,\n                    selectedParcelRef.current,\n                    address(parcel)\n                  )\n\n                  r = r / 256\n                  g = g / 256\n                  b = b / 256\n\n                  let desaturation = 1.0 - getParcelSaturation(parcel, selectedParcelRef.current)\n\n                  let luma = 0.3 * r + 0.6 * g + 0.1 * b;\n\n                  color = [\n                    (r + desaturation * (luma - r)) * 256,\n                    (g + desaturation * (luma - g)) * 256,\n                    (b + desaturation * (luma - b)) * 256,\n                    a,\n                  ]\n\n                }\n\n              }\n\n              let size = parcelSizeRef.current\n              let pixelX = columnIndex * size\n              let pixelY = rowIndex * size\n\n              context.fillStyle = `rgba(${color.join(`,`)})`\n              context.fillRect(pixelX, pixelY, size, size)\n\n              // let blockCoordinate = getBlockCoordinate(x, y)\n\n              // let text = `${x},${y}`\n              // let text = `${blockCoordinate.x},${blockCoordinate.y}`\n\n              // context.fillStyle = `yellow`\n              // context.fillText(text, pixelX, pixelY)\n\n            })\n\n      }\n    }\n\n  }, [\n    context,\n    size,\n    parcelSizeRef.current,\n    originRef.current,\n    selectedParcelRef.current\n  ])\n\n  const drawParcelsRef = React.useRef(drawParcels)\n\n  React.useEffect(() => {\n    drawParcelsRef.current = drawParcels\n  }, [drawParcels])\n\n  const handleMouseMove = React.useCallback((event: React.MouseEvent<HTMLCanvasElement>) => {\n\n    let canvasX = event.pageX - event.currentTarget.offsetLeft;\n    let canvasY = event.pageY - event.currentTarget.offsetTop;\n\n    let atlasX = Math.floor(canvasX / parcelSize)\n    let atlasY = Math.floor(canvasY / parcelSize)\n\n    let x = atlasX + originRef.current.x\n    let y = originRef.current.y - atlasY\n\n    let capturedOrigin = originRef.current\n    let capturedParcelSize = parcelSizeRef.current\n\n    getBlockPromise(x, y, apolloClient, cache)\n\n      .then((result: BlockDataResult) => {\n\n          if(JSON.stringify(capturedOrigin) !== JSON.stringify(originRef.current)) {\n            return;\n          }\n\n          if(capturedParcelSize !== parcelSizeRef.current) {\n            return;\n          }\n\n          const { data: block, error, loading } = result\n\n          const parcel = findParcel(block || { parcels: []}, x, y)\n\n          if(parcel)\n          {\n            setSelectedParcelRef.current(parcel)\n          }\n          else\n          {\n            setSelectedParcelRef.current(null)\n          }\n\n          window.setTimeout(() => {\n            drawParcelsRef.current()\n          })\n\n        })\n\n  }, [\n    canvasRef.current,\n    originRef.current,\n    parcelSizeRef.current,\n    selectedParcelRef.current,\n  ])\n\n  React.useEffect(function setCanvasContext() {\n\n    const canvas = canvasRef.current;\n\n    const contextSettings: CanvasRenderingContext2DSettings = {\n      // alpha: false,\n      // colorSpace: PredefinedColorSpace,\n      desynchronized: false,\n      willReadFrequently: false,\n    }\n\n    let context: CanvasRenderingContext2D|null;\n\n    if(canvas === null) {\n\n      setContext(null)\n\n    } else {\n\n      context = canvas.getContext(\n        '2d',\n        contextSettings\n      ) as CanvasRenderingContext2D\n\n      setContext(context)\n    }\n\n  }, [\n    canvasRef.current,\n    setContext,\n  ])\n\n  React.useEffect(\n    drawParcels,\n    [\n      context,\n      size,\n      parcelSizeRef.current,\n      originRef.current,\n    ]\n  )\n\n  return (\n    <nav className=\"CanvasParcelGrid\" data-testid=\"CanvasParcelGrid\">\n\n      <canvas ref={canvasRef}\n        width={size.width} height={size.height}\n        onMouseMove={(e) => handleMouseMove(e)}\n        className={css({\n          position: `fixed`,\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          zIndex: -1,\n          backgroundColor: `black`,\n          width: `${size.width}px`,\n          height: `${size.height}px`,\n          '&:hover': {\n            cursor: `pointer`,\n          },\n        })} />\n\n\t  </nav>\n  )\n\n}\n\nexport default CanvasParcelGrid;\n","export const DAOContractAddress = `0x9a6ebe7e2a7722f8200d0ffb63a1f6406a0d7dce`\n\n// const ETH_DEAD_ADDRESS = `0x000000000000000000000000000000000000dEaD`\n","import React from 'react'\n\nimport { css } from '@emotion/css'\n\nimport { useEthers } from '@usedapp/core'\n\nimport Parcel from '../../types/parcel'\nimport ITokenMetadata from '../../types/token'\n\nimport AppConfig from '../../config/app-config'\n\nimport useScreenDimensions from '../../hooks/use-screen-dimensions'\nimport useMousewheelScalable from '../../hooks/use-mousewheel-scalable'\nimport useControlledCoordinate from '../../hooks/use-controlled-coordinate'\n\nimport TokenBalance from '../TokenBalance/TokenBalance'\nimport ConnectToWalletButton from '../ConnectToWalletButton/ConnectToWalletButton'\n\nimport CanvasParcelGrid from '../CanvasParcelGrid/CanvasParcelGrid'\n\nimport './App.css'\n\nfunction App() {\n\n\tconst screenDimensions = useScreenDimensions()\n\n\tconst parcelCellSize = useMousewheelScalable(AppConfig.ParcelPixelWidth, {\n\t\tdelta: 1,\n\t\tminValue: AppConfig.ParcelPixelMinWidth,\n\t\tmaxValue: AppConfig.ParcelPixelMaxWidth,\n\t})\n\n\tconst origin = useControlledCoordinate(AppConfig.Origin)\n\n\tconst [selectedParcel, setSelectedParcel] = React.useState<Parcel|null>(null)\n\n\tconst { account: address } = useEthers()\n\n\t// See: https://etherscan.io/token/0x0f5d2fb29fb7d3cfee444a200298f468908cc942\n\n\tconst MANA: ITokenMetadata = {\n\t\tname: 'Decentraland',\n\t\tsymbol: 'MANA',\n\t\taddress: '0x0f5d2fb29fb7d3cfee444a200298f468908cc942',\n\t\tdecimals: 18,\n\t}\n\n\treturn (\n\t\t<div className='App'>\n\n\t\t\t<header>\n\t\t\t\t{\n\t\t\t\t\t!address &&\n\t\t\t\t\t<ConnectToWalletButton />\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\taddress &&\n\t\t\t\t\t<TokenBalance token={MANA} address={address} />\n\t\t\t\t}\n\t\t\t</header>\n\n\t\t\t<main>\n\n\t\t\t\t<CanvasParcelGrid\n\t\t\t\t\tsize={screenDimensions}\n\t\t\t\t\torigin={origin}\n\t\t\t\t\tparcelSize={parcelCellSize}\n\t\t\t\t\tselectedParcel={selectedParcel}\n\t\t\t\t\tsetSelectedParcel={setSelectedParcel}>\n\t\t\t\t</CanvasParcelGrid>\n\n\t\t\t</main>\n\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport localForage from 'localforage'\n\nimport {\n\tpersistCache,\n\tLocalForageWrapper\n} from 'apollo3-cache-persist'\n\nimport {\n\tApolloClient,\n\tInMemoryCache,\n\tApolloProvider,\n\tNormalizedCacheObject,\n} from '@apollo/client'\n\nimport {\n\tChainId,\n\tConfig,\n\tDAppProvider,\n} from '@usedapp/core'\n\nimport './index.css'\n\nimport reportWebVitals from './reportWebVitals'\n\nimport App from './components/App/App'\n\nconst getApolloClient = async (): Promise<ApolloClient<NormalizedCacheObject>> => {\n\n\tconst cache = new InMemoryCache({\n\t\ttypePolicies: {\n\t\t\tParcel: {\n\t\t\t\tkeyFields: ['x', 'y']\n\t\t\t},\n\t\t}\n\t})\n\n\tlocalForage.config({\n\t\tname: 'metestates',\n\t\tstoreName: 'keyvaluepairs',\n\t\tdescription: 'Local storage for the Metestates web app.'\n\t})\n\n\t// @NOTE(mzalla) See:\n\t// https://github.com/apollographql/apollo-cache-persist/blob/HEAD/docs/advanced-usage.md#additional-options\n\n\tawait persistCache({\n\t\tcache: cache,\n\t\tmaxSize: false,\n\t\tstorage: new LocalForageWrapper(localForage),\n\t})\n\n\tconst client = new ApolloClient({\n\t\t// https://api.decentraland.org/v1/tiles\n\t\turi: `https://api.thegraph.com/subgraphs/name/decentraland/marketplace`,\n\t\tcache: cache,\n\t\t// name: `Metestates`,\n\t\t// version: `0.1.0`,\n\t})\n\n\treturn client\n\n}\n\nasync function init() {\n\n\tconst client = await getApolloClient()\n\n\tconst dappProviderConfig: Config = {\n\t\treadOnlyChainId: ChainId.Mainnet,\n\t\treadOnlyUrls: {\n\t\t\t// [ChainId.Mainnet]: 'https://mainnet.infura.io/v3/62687d1a985d4508b2b7a24827551934',\n\t\t\t[ChainId.Mainnet]: 'https://mainnet.infura.io/v3/84842078b09946638c03157f83405213',\n\t\t\t// [ChainId.Mainnet]: 'https://eth-mainnet.gateway.pokt.network/v1/lb/6004bcd10040261633ade990',\n\t\t\t// [ChainId.Mainnet]: 'https://eth-mainnet.alchemyapi.io/v2/_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC',\n\t\t},\n\t}\n\n\tReactDOM.render(\n\n\t\t(\n\t\t\t<React.StrictMode>\n\t\t\t\t<ApolloProvider client={client}>\n\t\t\t\t\t<DAppProvider config={dappProviderConfig}>\n\t\t\t\t\t\t<App />\n\t\t\t\t\t</DAppProvider>\n\t\t\t\t</ApolloProvider>\n\t\t\t</React.StrictMode>\n\t\t),\n\n\t\tdocument.getElementById('root')\n\n\t)\n\n\t// If you want to start measuring performance in your app, pass a function\n\t// to log results (for example: reportWebVitals(console.log))\n\t// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\treportWebVitals()\n\n}\n\ninit()\n"],"sourceRoot":""}