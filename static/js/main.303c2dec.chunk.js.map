{"version":3,"sources":["config/app-config.ts","hooks/use-screen-dimensions.ts","hooks/use-mousewheel-scalable.ts","hooks/use-controlled-coordinate.ts","hooks/use-parcel-block.ts","hooks/use-parcel.ts","components/ParcelGridCell/ParcelGridCell.tsx","components/ParcelGrid/ParcelGrid.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppConfig","ParcelPixelWidth","ParcelPixelMinWidth","ParcelPixelMaxWidth","ParcelsPerQuery","ParcelBlockWidth","Origin","x","y","PanningStep","useScreenDimensions","React","width","window","innerWidth","height","innerHeight","screenDimensions","setScreenDimensions","onWindowResize","addEventListener","removeEventListener","clamp","value","min","Infinity","max","Math","useMousewheelScalable","initialValue","options","delta","scalableValue","setScalableValue","onMouseWheel","event","clampedValue","deltaY","minValue","maxValue","useControlledCoordinate","coord","coordinate","setCoordiante","onKeydown","step","key","getSomeParcelsQuery","gql","useParcelBlock","blockCoords","variables","first","xGte","xLt","sqrt","yLte","yGt","useQuery","errorPolicy","blockData","data","isBlockDataLoading","loading","blockError","error","console","warn","JSON","stringify","useParcel","parcelCoords","parcel","parcels","find","p","parseInt","ParcelGridCellDefaultStyles","padding","fontSize","filter","transition","ParcelGridCell","columnIndex","rowIndex","style","xMin","yMax","addr","estate","owner","address","backgroundColor","selectedParcel","substr","getBackgroundColor","grayscaleFilterValue","hasSameOwner","getGrayscaleFilterValue","onMouseEnter","setSelectedParcel","opacity","areEqual","buildItemData","memoize","size","ParcelGrid","parcelBounds","parcelCellSize","columnCount","ceil","rowCount","itemData","onMouseLeave","className","css","overflow","cursor","columnWidth","rowHeight","itemKey","App","origin","useState","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getClient","a","cache","InMemoryCache","typePolicies","Parcel","keyFields","localForage","config","name","storeName","description","client","ApolloClient","uri","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById","init"],"mappings":"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","file":"static/js/main.303c2dec.chunk.js","sourcesContent":["import { Coordinate } from '../types/coordinate'\n\nexport interface IAppConfig {\n\tParcelPixelWidth: number;\n\tParcelPixelMinWidth: number;\n\tParcelPixelMaxWidth: number;\n\tParcelsPerQuery: number,\n\tOrigin: Coordinate;\n\tPanningStep: number;\n}\n\n// @NOTE(mzalla) To call `api.thegraph.com`, we can only fetch up to a maximum\n// of 1,000 items per query; by choosing a large parcel block size (30), we get\n// close to 1,000 parcels per block query without going over this limit;\nconst ParcelBlockWidth = 4\n\nconst AppConfig: IAppConfig = {\n\tParcelPixelWidth: 32,\n\tParcelPixelMinWidth: 14,\n\tParcelPixelMaxWidth: 80,\n\tParcelsPerQuery: ParcelBlockWidth * ParcelBlockWidth,\n\tOrigin: { x: 0, y: 0 },\n\tPanningStep: 3,\n}\n\nexport default AppConfig\n","import * as React from 'react'\n\nfunction useScreenDimensions() {\n\n\tconst [screenDimensions, setScreenDimensions] = React.useState({\n\t\twidth: window.innerWidth,\n\t\theight: window.innerHeight,\n\t})\n\n\tReact.useEffect(() => {\n\n\t\tfunction onWindowResize() {\n\t\t\tsetScreenDimensions({\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight,\n\t\t\t})\n\t\t}\n\n\t\twindow.addEventListener(`resize`, onWindowResize)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(`resize`, onWindowResize)\n\t\t}\n\n\t}, [window.innerWidth, window.innerHeight])\n\n\treturn screenDimensions\n\n}\n\nexport default useScreenDimensions\n","import * as React from 'react'\n\ninterface IUseMousewheelScalableOptions {\n\tdelta: number,\n\tminValue?: number,\n\tmaxValue?: number,\n}\n\nfunction clamp(\n\tvalue: number,\n\tmin: number = -Infinity,\n\tmax: number = Infinity): number\n{\n\treturn Math.max(\n\t\tmin || -Infinity,\n\t\tMath.min(value, max || Infinity)\n\t)\n}\n\nfunction useMousewheelScalable(\n\tinitialValue: number = 0,\n\toptions: IUseMousewheelScalableOptions = { delta: 1 })\n{\n\n\tconst [scalableValue, setScalableValue] = React.useState(initialValue)\n\n\tReact.useEffect(() => {\n\n\t\tfunction onMouseWheel(event: WheelEvent) {\n\n\t\t\tconst newValue = scalableValue + (event.deltaY < 0 ?\n\t\t\t\t-1 * options.delta :\n\t\t\t\toptions.delta)\n\n\t\t\tconst clampedValue = clamp(newValue, options.minValue, options.maxValue)\n\n\t\t\tsetScalableValue(clampedValue)\n\n\t\t}\n\n\t\twindow.addEventListener(`wheel`, onMouseWheel)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(`wheel`, onMouseWheel)\n\t\t}\n\n\t}, [scalableValue, setScalableValue])\n\n\treturn scalableValue\n\n}\n\nexport default useMousewheelScalable\n","import * as React from 'react'\n\nimport { Coordinate } from '../types/coordinate'\n\nimport AppConfig from '../config/app-config'\n\nfunction useControlledCoordinate(coord: Coordinate = { x: 0, y: 0 }) {\n\n\tconst [coordinate, setCoordiante] = React.useState(coord)\n\n\tReact.useEffect(() => {\n\n\t\tfunction onKeydown(event: KeyboardEvent) {\n\t\t\tconst step = AppConfig.PanningStep;\n\t\t\tconst delta: Coordinate = { x: 0, y: 0 }\n\n\t\t\tswitch (event.key) {\n\t\t\t\tcase `ArrowUp`:\n\t\t\t\t\tdelta.y = step\n\t\t\t\t\tbreak;\n\t\t\t\tcase `ArrowDown`:\n\t\t\t\t\tdelta.y = -step\n\t\t\t\t\tbreak;\n\t\t\t\tcase `ArrowLeft`:\n\t\t\t\t\tdelta.x = -step\n\t\t\t\t\tbreak;\n\t\t\t\tcase `ArrowRight`:\n\t\t\t\t\tdelta.x = step\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tsetCoordiante({\n\t\t\t\tx: coordinate.x + delta.x,\n\t\t\t\ty: coordinate.y + delta.y,\n\t\t\t})\n\t\t}\n\n\t\twindow.addEventListener(`keydown`, onKeydown)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(`keydown`, onKeydown)\n\t\t}\n\n\t}, [coordinate, setCoordiante])\n\n\treturn coordinate\n\n}\n\nexport default useControlledCoordinate\n","import {\n\tuseQuery,\n\tgql,\n\t// DocumentNode,\n\t// QueryResult,\n\t// OperationVariables,\n\tApolloError,\n} from '@apollo/client'\n\nimport { GET_PARCEL_BLOCK, GET_PARCEL_BLOCKVariables } from './__generated__/GET_PARCEL_BLOCK'\n\nimport { Coordinate } from \"../types/coordinate\";\n\nimport AppConfig from '../config/app-config'\n\n// interface GetSomeParcelsUseQueryResult\n//   extends QueryResult<GET_SOME_PARCELS, unknown> {}\n\ninterface GetSomeParcelsUseQueryResult {\n\tdata?: GET_PARCEL_BLOCK,\n\tloading: boolean,\n\terror?: ApolloError,\n}\n\n// See:\n//\n// https://thegraph.com/docs/developer/developer-faq#22-is-there-a-limit-\\\n//  to-how-many-objects-the-graph-can-return-per-query\n\nconst getSomeParcelsQuery = gql`\n\tquery GET_PARCEL_BLOCK(\n\t\t$first: Int,\n\t\t$xGte: BigInt\n\t\t$xLt: BigInt\n\t\t$yLte: BigInt\n\t\t$yGt: BigInt\n\t) {\n\t\tparcels(\n\t\t\tfirst: $first,\n\t\t\twhere: { x_gte: $xGte, x_lt: $xLt, y_lte: $yLte, y_gt: $yGt }\n\t\t) {\n\t\t\tid\n\t\t\t# tokenId\n\t\t\towner {\n\t\t\t\taddress\n\t\t\t}\n\t\t\tx\n\t\t\ty\n\t\t\t# data {\n\t\t\t# \tname\n\t\t\t# \tdescription\n\t\t\t# \tipns\n\t\t\t# }\n\t\t\testate {\n\t\t\t\t# id\n\t\t\t\t# tokenId\n\t\t\t\towner {\n\t\t\t\t\taddress\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\n\nfunction useParcelBlock(blockCoords: Coordinate) {\n\n\tconst variables: GET_PARCEL_BLOCKVariables = {\n\t\tfirst: AppConfig.ParcelsPerQuery,\n\t\txGte: blockCoords.x,\n\t\txLt: blockCoords.x + Math.sqrt(AppConfig.ParcelsPerQuery),\n\t\tyLte: blockCoords.y,\n\t\tyGt: blockCoords.y - Math.sqrt(AppConfig.ParcelsPerQuery),\n\t}\n\n\tconst { data: blockData, loading: isBlockDataLoading, error: blockError }: GetSomeParcelsUseQueryResult =\n\t\tuseQuery(getSomeParcelsQuery, {\n\t\t\terrorPolicy: `all`,\n\t\t\tvariables,\n\t\t})\n\n\tif(blockError)\n\t{\n\t\tconsole.warn(`Failed to fetch block at (${blockCoords.x}, ${blockCoords.y}): ${JSON.stringify(blockError)}`)\n\t}\n\n\treturn { blockData, isBlockDataLoading, blockError }\n\n}\n\nexport default useParcelBlock\n","import { Coordinate } from '../types/coordinate'\nimport { Parcel } from '../types/parcel'\n\nimport AppConfig from '../config/app-config'\n\nimport useParcelBlock from './use-parcel-block'\n\nfunction useParcel(parcelCoords: Coordinate) {\n\n\t// Maps parcel coordinate to block (anchor) coordiante\n\n\tconst blockCoords: Coordinate = {\n\t\tx: parcelCoords.x - (parcelCoords.x % Math.sqrt(AppConfig.ParcelsPerQuery)),\n\t\ty: parcelCoords.y - (parcelCoords.y % Math.sqrt(AppConfig.ParcelsPerQuery)),\n\t}\n\n\tconst { blockData, isBlockDataLoading, blockError } = useParcelBlock(blockCoords)\n\n\tlet parcel: Parcel|undefined\n\n\tif(!isBlockDataLoading && !blockError)\n\t{\n\t\tparcel = blockData?.parcels.find(\n\t\t\tp => parseInt(p.x) === parcelCoords.x && parseInt(p.y) === parcelCoords.y\n\t\t)\n\t}\n\n\treturn { parcel, isBlockDataLoading, blockError }\n\n\n}\n\nexport default useParcel\n","import * as React from 'react'\n\nimport { areEqual } from 'react-window'\n\nimport { Parcel } from '../../types/parcel'\n\nimport useParcel from '../../hooks/use-parcel'\n\ninterface IParcelGridCellItemData {\n\txMin: number,\n\tyMax: number,\n\tsize: number,\n\tselectedParcel: Parcel|null,\n\tsetSelectedParcel: Function\n}\n\ninterface IParcelGridCellProps extends React.PropsWithChildren<React.Attributes> {\n\tdata: IParcelGridCellItemData;\n\tcolumnIndex: number,\n\trowIndex: number,\n\tstyle: React.CSSProperties,\n}\n\n// const ETH_DEAD_ADDRESS = `0x000000000000000000000000000000000000dEaD`\nconst DCL_DAO_CONTRACT = `0x9a6ebe7e2a7722f8200d0ffb63a1f6406a0d7dce`\n\nfunction address(parcel: Parcel) {\n\treturn (parcel.estate ? parcel.estate : parcel).owner.address\n}\n\nfunction short(address: string) {\n\treturn `${address.slice(0, 5)}…${address.slice(address.length - 4)}`\n}\n\nfunction hasSameOwner(\n\tparcel: Parcel,\n\tselectedParcel: Parcel): boolean\n{\n\n\tif (selectedParcel.estate || parcel.estate)\n\t{\n\t\tif(selectedParcel.estate && parcel.estate)\n\t\t{\n\t\t\tif(selectedParcel.estate.owner.address === parcel.estate.owner.address)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\telse if(selectedParcel.estate)\n\t\t{\n\t\t\tif(selectedParcel.estate.owner.address === parcel.owner.address)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\telse if(selectedParcel.owner.address === parcel.estate?.owner.address)\n\t\t{\n\t\t\treturn true\n\t\t}\n\t} else if (parcel.owner.address === selectedParcel.owner.address) {\n\t\treturn true\n\t}\n\n\treturn false\n\n}\n\nfunction getBackgroundColor(\n\tparcel: Parcel,\n\tselectedParcel: Parcel|null,\n\taddress: string): string\n{\n\n\tif (address === DCL_DAO_CONTRACT) {\n\t\treturn '#000'\n\t}\n\n\treturn `#${address.substr(2, 8)}`\n}\n\nfunction getGrayscaleFilterValue(parcel: Parcel, selectedParcel: Parcel|null): string\n{\n\tif (selectedParcel&& !hasSameOwner(parcel, selectedParcel))\n\t{\n\t\treturn `0.95`\n\t}\n\n\treturn `0.0`\n}\n\nconst ParcelGridCellDefaultStyles = {\n\tpadding: `4px`,\n\tfontSize: '9px',\n\tfilter: `grayscale(0.0)`,\n\ttransition: `filter 0.35s ease-in-out`,\n}\n\nconst ParcelGridCell = React.memo(({\n\tdata,\n\tcolumnIndex,\n\trowIndex,\n\tstyle,\n}: IParcelGridCellProps) => {\n\tconst { parcel, isBlockDataLoading, blockError } =\n\t\tuseParcel({ x: columnIndex + data.xMin, y: data.yMax - rowIndex })\n\n\tif(parcel)\n\t{\n\t\tconst addr = address(parcel)\n\n\t\tconst backgroundColor = getBackgroundColor(\n\t\t\tparcel, data.selectedParcel, addr)\n\n\t\tconst grayscaleFilterValue = getGrayscaleFilterValue(\n\t\t\tparcel, data.selectedParcel)\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tonMouseEnter={() => data.setSelectedParcel(parcel)}\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor,\n\t\t\t\t\t...ParcelGridCellDefaultStyles,\n\t\t\t\t\tfilter: `grayscale(${grayscaleFilterValue})`,\n\t\t\t\t\t...style,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{/*\n\t\t\t\t{\n\t\t\t\t\tdata.size >= MinimumSizeToShowDetails &&\n\t\t\t\t\taddr !== DCL_DAO_CONTRACT && (\n\t\t\t\t\t\t`${parcel.x},${parcel.y}`\n\t\t\t\t\t\t// <p>\n\t\t\t\t\t\t// \t<a\n\t\t\t\t\t\t// \t\tclassName=\"hyperlink\"\n\t\t\t\t\t\t// \t\thref={`https://etherscan.io/address/${addr}`}\n\t\t\t\t\t\t// \t\trel=\"noopener noreferrer nofollow\"\n\t\t\t\t\t\t// \t\ttarget=\"_blank\"\n\t\t\t\t\t\t// \t>\n\t\t\t\t\t\t// \t\t{shortAddr}\n\t\t\t\t\t\t// \t</a>\n\t\t\t\t\t\t// </p>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t*/}\n\t\t\t</div>\n\t\t)\n\t}\n\n\tif (isBlockDataLoading || blockError || !parcel) {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\topacity: isBlockDataLoading ? 0.4 : 0.8,\n\t\t\t\t\tbackgroundColor: blockError ? 'red' : 'grey',\n\t\t\t\t\t...ParcelGridCellDefaultStyles,\n\t\t\t\t\t...style\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<p>\n\t\t\t\t\t({columnIndex + data.xMin},{data.yMax - rowIndex})\n\t\t\t\t\t{ isBlockDataLoading && `Loading…` }\n\t\t\t\t\t{ blockError && `Error!` }\n\t\t\t\t</p>\n\n\t\t\t</div>\n\t\t)\n\t}\n\n\tconsole.warn(`This should be impossible!`)\n\n\treturn null\n\n\n}, areEqual)\n\nexport { ParcelGridCell }\n","import React from 'react';\n\nimport memoize from 'memoize-one';\n\nimport { css } from '@emotion/css';\n\nimport {FixedSizeGrid as Grid} from 'react-window'\n\nimport { Coordinate } from '../../types/coordinate'\nimport { Parcel } from '../../types/parcel'\n\nimport { ParcelGridCell } from '../ParcelGridCell/ParcelGridCell'\n\ninterface IParcelGridProps extends React.PropsWithChildren<React.Attributes> {\n\tparcelBounds: Coordinate[],\n\tparcelCellSize: number,\n\tscreenDimensions: {\n\t\twidth: number,\n\t\theight: number,\n\t},\n\tselectedParcel: Parcel|null,\n\tsetSelectedParcel: Function,\n}\n\nconst buildItemData = memoize(\n\t(size: number, xMin: number, yMax: number, selectedParcel, setSelectedParcel) =>\n\t\t({ size, xMin, yMax, selectedParcel, setSelectedParcel })\n)\n\nfunction ParcelGrid(\n\t{ parcelBounds, parcelCellSize, screenDimensions, selectedParcel, setSelectedParcel }: IParcelGridProps)\n{\n\n\tconst parcelBoundsPadding = 0\n\n\tconst xMin = parcelBounds[0].x - parcelBoundsPadding\n\n\tconst yMax = parcelBounds[0].y + parcelBoundsPadding\n\n\tconst columnCount = Math.ceil(screenDimensions.width / parcelCellSize)\n\tconst rowCount = Math.ceil(screenDimensions.height / parcelCellSize)\n\n\tconst itemData = buildItemData(parcelCellSize, xMin, yMax, selectedParcel, setSelectedParcel)\n\n\treturn (\n\t\t<div onMouseLeave={() => setSelectedParcel(null)}>\n\t\t\t<Grid\n\t\t\t\tclassName={\n\t\t\t\t\tcss({\n\t\t\t\t\t\twidth: `${screenDimensions.width}px !important`,\n\t\t\t\t\t\theight: `${screenDimensions.height}px !important`,\n\t\t\t\t\t\toverflow: `hidden !important`,\n\t\t\t\t\t\t'&:hover': {\n\t\t\t\t\t\t\tcursor: `pointer`\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\twidth={screenDimensions.width}\n\t\t\t\theight={screenDimensions.height}\n\t\t\t\tcolumnWidth={parcelCellSize}\n\t\t\t\trowHeight={parcelCellSize}\n\t\t\t\tcolumnCount={columnCount}\n\t\t\t\trowCount={rowCount}\n\t\t\t\titemKey={data => `(${data.columnIndex},${data.rowIndex})`}\n\t\t\t\titemData={itemData}\n\t\t\t>\n\t\t\t\t{ParcelGridCell}\n\t\t\t</Grid>\n\n\t\t</div>\n\n\t)\n}\n\nexport default ParcelGrid\n","import React from 'react'\n\nimport { css } from '@emotion/css'\n\nimport { Coordinate } from '../../types/coordinate'\n\nimport AppConfig from '../../config/app-config'\n\nimport useScreenDimensions from '../../hooks/use-screen-dimensions'\nimport useMousewheelScalable from '../../hooks/use-mousewheel-scalable'\nimport useControlledCoordinate from '../../hooks/use-controlled-coordinate'\n\nimport ParcelGrid from '../ParcelGrid/ParcelGrid'\n\nimport './App.css'\n\nfunction App() {\n\tconst screenDimensions = useScreenDimensions()\n\tconst parcelCellSize = useMousewheelScalable(AppConfig.ParcelPixelWidth, {\n\t\tdelta: 4,\n\t\tminValue: AppConfig.ParcelPixelMinWidth,\n\t\tmaxValue: AppConfig.ParcelPixelMaxWidth,\n\t})\n\tconst origin = useControlledCoordinate(AppConfig.Origin)\n\n\tconst parcelBounds: Coordinate[] = [\n\t\torigin,\n\t\t{\n\t\t\tx: origin.x + Math.sqrt(AppConfig.ParcelsPerQuery),\n\t\t\ty: origin.y - Math.sqrt(AppConfig.ParcelsPerQuery),\n\t\t},\n\t]\n\n\tconst [selectedParcel, setSelectedParcel] = React.useState(null)\n\n\treturn (\n\t\t<div\n\t\t\tclassName={css({\n\t\t\t\tcolor: `lightgray`,\n\t\t\t\tbackgroundColor: `white`,\n\t\t\t\twidth: `${screenDimensions.width}px`,\n\t\t\t\theight: `${screenDimensions.height}px`,\n\t\t\t\toverflow: `hidden`,\n\t\t\t})}\n\t\t>\n\t\t\t<ParcelGrid\n\t\t\t\tparcelBounds={parcelBounds}\n\t\t\t\tparcelCellSize={parcelCellSize}\n\t\t\t\tscreenDimensions={screenDimensions}\n\t\t\t\tselectedParcel={selectedParcel}\n\t\t\t\tsetSelectedParcel={setSelectedParcel}\n\t\t\t></ParcelGrid>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App/App'\nimport reportWebVitals from './reportWebVitals'\n\nimport localForage from 'localforage'\n\nimport {\n\tpersistCache,\n\tLocalForageWrapper\n} from 'apollo3-cache-persist'\n\nimport {\n\tApolloClient,\n\tInMemoryCache,\n\tApolloProvider,\n} from '@apollo/client'\n\nasync function getClient() {\n\tconst cache = new InMemoryCache({\n\t\ttypePolicies: {\n\t\t\tParcel: {\n\t\t\t\tkeyFields: ['x', 'y']\n\t\t\t},\n\t\t}\n\t})\n\n\tlocalForage.config({\n\t\tname: 'metestates',\n\t\tstoreName: 'keyvaluepairs',\n\t\tdescription: 'Local storage for the Metestates web app.'\n\t})\n\n\t// await persistCache({\n\t// \tcache: cache,\n\t// \tstorage: new LocalForageWrapper(localForage),\n\t// })\n\n\tconst client = new ApolloClient({\n\t\t// https://api.decentraland.org/v1/tiles\n\t\turi: `https://api.thegraph.com/subgraphs/name/decentraland/marketplace`,\n\t\tcache: cache,\n\t\t// name: `Metestates`,\n\t\t// version: `0.1.0`,\n\t})\n\n\treturn client\n}\n\nasync function init() {\n\n\tconst client = await getClient()\n\n\tReactDOM.render(\n\n\t\t<React.StrictMode>\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<App />\n\t\t\t</ApolloProvider>\n\t\t</React.StrictMode>,\n\n\t\tdocument.getElementById('root')\n\n\t)\n\n\t// If you want to start measuring performance in your app, pass a function\n\t// to log results (for example: reportWebVitals(console.log))\n\t// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\treportWebVitals()\n\n}\n\ninit()\n"],"sourceRoot":""}