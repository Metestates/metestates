{"version":3,"sources":["config/app-config.ts","hooks/use-screen-dimensions.ts","hooks/use-mousewheel-scalable.ts","hooks/use-controlled-coordinate.ts","queries/getBlockData.ts","components/CanvasParcelGrid/CanvasParcelGrid.tsx","utils/parcel.ts","constants/DAOContractAddress.ts","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppConfig","ParcelPixelWidth","ParcelPixelMinWidth","ParcelPixelMaxWidth","ParcelBlockWidth","ParcelsPerQuery","Origin","x","y","PanningStep","useScreenDimensions","React","width","window","innerWidth","height","innerHeight","screenDimensions","setScreenDimensions","onWindowResize","addEventListener","removeEventListener","clamp","value","min","Infinity","max","Math","useMousewheelScalable","initialValue","options","delta","scalableValue","setScalableValue","onMouseWheel","event","clampedValue","deltaY","minValue","maxValue","useControlledCoordinate","coord","coordinate","setCoordiante","onKeydown","step","key","getBlockDataQuery","gql","getParcelPromise","apolloClient","cache","parcelX","parcelY","promise","blockCoordinate","variables","first","xGte","xLt","yLte","yGt","blockKey","query","errorPolicy","CanvasParcelGrid","size","parcelBounds","parcelSize","selectedParcel","setSelectedParcel","canvasRef","useRef","useState","context","setContext","useApolloClient","drawParcels","useCallback","current","canvas","clearRect","rowCount","ceil","columnCount","rowIndex","columnIndex","origin","then","parcel","address","blockData","data","error","color","loading","parcels","find","p","parseInt","estate","owner","slice","r","g","b","a","desaturation","hasSameOwner","getParcelSaturation","luma","parcelRect","fillStyle","join","fillRect","apply","handleMouseMove","canvasX","pageX","currentTarget","offsetLeft","canvasY","pageY","offsetTop","atlasX","floor","atlasY","result","useEffect","getContext","desynchronized","willReadFrequently","className","data-testid","ref","onMouseMove","e","css","position","top","left","right","bottom","zIndex","backgroundColor","cursor","App","parcelCellSize","sqrt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","getClient","InMemoryCache","typePolicies","Parcel","keyFields","localForage","config","name","storeName","description","client","ApolloClient","uri","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById","init"],"mappings":"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","file":"static/js/main.5b424b2c.chunk.js","sourcesContent":["import { Coordinate } from '../types/coordinate'\n\nexport interface IAppConfig {\n\tParcelPixelWidth: number;\n\tParcelPixelMinWidth: number;\n\tParcelPixelMaxWidth: number;\n\tParcelBlockWidth: number,\n\tParcelsPerQuery: number,\n\tOrigin: Coordinate;\n\tPanningStep: number;\n}\n\n// @NOTE(mzalla) To call `api.thegraph.com`, we can only fetch up to a maximum\n// of 1,000 items per query; by choosing a large parcel block size (30), we get\n// close to 1,000 parcels per block query without going over this limit;\nconst ParcelBlockWidth = 4\n\nconst AppConfig: IAppConfig = {\n\tParcelPixelWidth: 32,\n\tParcelPixelMinWidth: 8,\n\tParcelPixelMaxWidth: 80,\n\tParcelBlockWidth,\n\tParcelsPerQuery: ParcelBlockWidth * ParcelBlockWidth,\n\tOrigin: { x: 0, y: 0 },\n\tPanningStep: 1,\n}\n\nexport default AppConfig\n","import * as React from 'react'\n\nimport { Dimensions } from '../types/dimensions'\n\ntype UseScreenDimensionsHookResult = Dimensions\n\nconst useScreenDimensions = (): UseScreenDimensionsHookResult => {\n\n\tconst [screenDimensions, setScreenDimensions] = React.useState<Dimensions>({\n\t\twidth: window.innerWidth,\n\t\theight: window.innerHeight,\n\t})\n\n\tReact.useEffect(() => {\n\n\t\tfunction onWindowResize() {\n\t\t\tsetScreenDimensions({\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight,\n\t\t\t})\n\t\t}\n\n\t\twindow.addEventListener(`resize`, onWindowResize)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(`resize`, onWindowResize)\n\t\t}\n\n\t}, [\n\t\twindow.innerWidth,\n\t\twindow.innerHeight\n\t])\n\n\treturn screenDimensions\n\n}\n\nexport default useScreenDimensions\n","import * as React from 'react'\n\ninterface IUseMousewheelScalableOptions {\n\tdelta: number,\n\tminValue?: number,\n\tmaxValue?: number,\n}\n\nfunction clamp(\n\tvalue: number,\n\tmin: number = -Infinity,\n\tmax: number = Infinity): number\n{\n\treturn Math.max(\n\t\tmin || -Infinity,\n\t\tMath.min(value, max || Infinity)\n\t)\n}\n\nfunction useMousewheelScalable(\n\tinitialValue: number = 0,\n\toptions: IUseMousewheelScalableOptions = { delta: 1 })\n{\n\n\tconst [scalableValue, setScalableValue] = React.useState(initialValue)\n\n\tReact.useEffect(() => {\n\n\t\tfunction onMouseWheel(event: WheelEvent) {\n\n\t\t\tconst newValue = scalableValue + (event.deltaY < 0 ?\n\t\t\t\t-1 * options.delta :\n\t\t\t\toptions.delta)\n\n\t\t\tconst clampedValue = clamp(newValue, options.minValue, options.maxValue)\n\n\t\t\tsetScalableValue(clampedValue)\n\n\t\t}\n\n\t\twindow.addEventListener(`wheel`, onMouseWheel)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(`wheel`, onMouseWheel)\n\t\t}\n\n\t}, [scalableValue, setScalableValue])\n\n\treturn scalableValue\n\n}\n\nexport default useMousewheelScalable\n","import * as React from 'react'\n\nimport { Coordinate } from '../types/coordinate'\n\nimport AppConfig from '../config/app-config'\n\nfunction useControlledCoordinate(coord: Coordinate = { x: 0, y: 0 }) {\n\n\tconst [coordinate, setCoordiante] = React.useState(coord)\n\n\tReact.useEffect(() => {\n\n\t\tfunction onKeydown(event: KeyboardEvent) {\n\t\t\tconst step = AppConfig.PanningStep;\n\t\t\tconst delta: Coordinate = { x: 0, y: 0 }\n\n\t\t\tswitch (event.key) {\n\t\t\t\tcase `ArrowUp`:\n\t\t\t\t\tdelta.y = step\n\t\t\t\t\tbreak;\n\t\t\t\tcase `ArrowDown`:\n\t\t\t\t\tdelta.y = -step\n\t\t\t\t\tbreak;\n\t\t\t\tcase `ArrowLeft`:\n\t\t\t\t\tdelta.x = -step\n\t\t\t\t\tbreak;\n\t\t\t\tcase `ArrowRight`:\n\t\t\t\t\tdelta.x = step\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tsetCoordiante({\n\t\t\t\tx: coordinate.x + delta.x,\n\t\t\t\ty: coordinate.y + delta.y,\n\t\t\t})\n\t\t}\n\n\t\twindow.addEventListener(`keydown`, onKeydown)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(`keydown`, onKeydown)\n\t\t}\n\n\t}, [coordinate, setCoordiante])\n\n\treturn coordinate\n\n}\n\nexport default useControlledCoordinate\n","import { gql } from \"@apollo/client\";\n\n// See:\n//\n// https://thegraph.com/docs/developer/developer-faq#22-is-there-a-limit-\\\n//  to-how-many-objects-the-graph-can-return-per-query\n\nconst getBlockDataQuery = gql`\n\tquery GET_PARCEL_BLOCK(\n\t\t$first: Int,\n\t\t$xGte: BigInt\n\t\t$xLt: BigInt\n\t\t$yLte: BigInt\n\t\t$yGt: BigInt\n\t) {\n\t\tparcels(\n\t\t\tfirst: $first,\n\t\t\twhere: { x_gte: $xGte, x_lt: $xLt, y_lte: $yLte, y_gt: $yGt }\n\t\t) {\n\t\t\tid\n\t\t\t# tokenId\n\t\t\towner {\n\t\t\t\taddress\n\t\t\t}\n\t\t\tx\n\t\t\ty\n\t\t\t# data {\n\t\t\t# \tname\n\t\t\t# \tdescription\n\t\t\t# \tipns\n\t\t\t# }\n\t\t\testate {\n\t\t\t\t# id\n\t\t\t\t# tokenId\n\t\t\t\towner {\n\t\t\t\t\taddress\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\n\nexport default getBlockDataQuery\n","import React, { FC } from 'react';\n\nimport { ApolloClient, useApolloClient } from '@apollo/client';\n\nimport { css } from '@emotion/css';\n\nimport { Color } from '../../types/color';\nimport { Parcel } from '../../types/parcel';\nimport { Coordinate } from '../../types/coordinate';\nimport { Dimensions } from '../../types/dimensions';\n\nimport AppConfig from '../../config/app-config';\n\nimport getBlockDataQuery from '../../queries/getBlockData';\n\nimport { BlockDataQueryVariables, BlockDataResult } from '../../hooks/use-parcel-block';\n\nimport { address, getParcelSaturation, getParcelColor, getBlockCoordinate } from '../../utils/parcel';\n\ntype BlockDataResultPromiseCache = {\n  [key: string]: Promise<BlockDataResult>\n}\n\nconst getParcelPromise = (\n  x: number,\n  y: number,\n  apolloClient: ApolloClient<object>,\n  cache: BlockDataResultPromiseCache): Promise<BlockDataResult> =>\n{\n\n  const blockCoordinate = getBlockCoordinate(x, y)\n\n  const variables: BlockDataQueryVariables = {\n    first: AppConfig.ParcelsPerQuery,\n    xGte: blockCoordinate.x,\n    xLt: blockCoordinate.x + AppConfig.ParcelBlockWidth,\n    yLte: blockCoordinate.y,\n    yGt: blockCoordinate.y - AppConfig.ParcelBlockWidth,\n  }\n\n  let promise: Promise<BlockDataResult>;\n\n  let blockKey = `${blockCoordinate.x},${blockCoordinate.y}`\n\n  if(blockKey in cache)\n  {\n    promise = cache[blockKey]\n  }\n  else\n  {\n    promise = apolloClient.query({\n          query: getBlockDataQuery,\n          errorPolicy: `all`,\n          variables,\n          // context?: any;\n          // fetchPolicy?: FetchPolicy;\n          // pollInterval?: number;\n          // notifyOnNetworkStatusChange?: boolean;\n          // returnPartialData?: boolean;\n          // partialRefetch?: boolean;\n          // canonizeResults?: boolean;\n      })\n\n    cache[blockKey] = promise\n  }\n\n  return promise\n\n}\n\ntype CanvasParcelGridProps = React.PropsWithChildren<{\n  size: Dimensions;\n  parcelBounds: Coordinate[];\n  parcelSize: number;\n  selectedParcel: Parcel|null;\n  setSelectedParcel: (value: Parcel|null) => void;\n}>\n\nconst CanvasParcelGrid: FC<CanvasParcelGridProps> = ({\n  size,\n  parcelBounds,\n  parcelSize,\n  selectedParcel,\n  setSelectedParcel\n}) => {\n\n  const canvasRef = React.useRef<HTMLCanvasElement>(null)\n\n  const originRef = React.useRef<Coordinate|null>(parcelBounds[0])\n  const parcelSizeRef = React.useRef<number>(parcelSize)\n\n  const [context, setContext] = React.useState<CanvasRenderingContext2D|null>(null)\n\n  const apolloClient = useApolloClient()\n\n  const cache: BlockDataResultPromiseCache  = {}\n\n  const drawParcels = React.useCallback(() => {\n\n    if(canvasRef.current === null || context === null)\n    {\n      return\n    }\n\n    const canvas = canvasRef.current\n\n    const { width, height } = canvas\n\n    context.clearRect(0, 0, width, height)\n\n    const rowCount = Math.ceil(size.height / parcelSize)\n    const columnCount = Math.ceil(size.width / parcelSize)\n\n    for(let rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n      for(let columnIndex = 0; columnIndex < columnCount; columnIndex++) {\n\n        const origin = parcelBounds[0]\n\n        let x = columnIndex + origin.x\n        let y = origin.y - rowIndex\n\n        getParcelPromise(x, y, apolloClient, cache)\n          .then(({ data: blockData, error, loading }: BlockDataResult) => {\n\n              // if(originRef.current) {\n              //   if(origin.x !== originRef.current.x || origin.y !== originRef.current.y ) {\n              //     return;\n              //   }\n              // }\n\n              // if(parcelSizeRef.current)\n              // {\n              //   if(parcelSize !== parcelSizeRef.current) {\n              //     return;\n              //   }\n              // }\n\n              let parcel: Parcel|undefined;\n\n              let color: Color = [0, 0, 0, 255];\n\n              if(loading) {\n\n                color = [248, 248, 255, 0.4]\n\n              } else if(error) {\n\n                color = [240, 128, 128, 0.4]\n\n              } else {\n\n                parcel = blockData?.parcels.find(\n                  p => !!(\n                    parseInt(p.x) === x &&\n                    parseInt(p.y) === y\n                  )\n                )\n\n                if(parcel)\n                {\n                  let [r, g, b, a] = getParcelColor(\n                    parcel,\n                    selectedParcel,\n                    address(parcel)\n                  )\n\n                  r = r / 256\n                  g = g / 256\n                  b = b / 256\n\n                  let desaturation = 1.0 - getParcelSaturation(parcel, selectedParcel)\n\n                  let luma = 0.3 * r + 0.6 * g + 0.1 * b;\n\n                  color = [\n                    (r + desaturation * (luma - r)) * 256,\n                    (g + desaturation * (luma - g)) * 256,\n                    (b + desaturation * (luma - b)) * 256,\n                    a,\n                  ]\n\n                }\n\n              }\n\n              let parcelRect: [number, number, number, number] = [\n                columnIndex * parcelSize,\n                rowIndex * parcelSize,\n                parcelSize,\n                parcelSize,\n              ]\n\n              context.fillStyle = `rgba(${color.join(`,`)})`\n\n              context.fillRect.apply(context, parcelRect)\n\n            })\n\n      }\n    }\n\n  }, [\n    context,\n    size,\n    parcelSize,\n    parcelBounds[0].x,\n    parcelBounds[0].y,\n    selectedParcel\n  ])\n\n  const handleMouseMove = React.useCallback((event: React.MouseEvent<HTMLCanvasElement>) => {\n\n    const origin = parcelBounds[0]\n\n    let canvasX = event.pageX - event.currentTarget.offsetLeft;\n    let canvasY = event.pageY - event.currentTarget.offsetTop;\n\n    let atlasX = Math.floor(canvasX / parcelSize)\n    let atlasY = Math.floor(canvasY / parcelSize)\n\n    // console.log(`Mouse position (canvas): (${x}, ${y})`)\n    // console.log(`Mouse position (atlas): (${atlasX}, ${atlasY})`)\n\n    let x = atlasX + origin.x\n    let y = origin.y - atlasY\n\n    const parcelPromise = getParcelPromise(x, y, apolloClient, cache)\n\n    parcelPromise\n      .then((result: BlockDataResult) => {\n\n        const { data: blockData, error, loading } = result\n\n        const parcel = blockData?.parcels.find(\n          p => !!(\n            parseInt(p.x) === x &&\n            parseInt(p.y) === y\n          )\n        )\n\n        if(parcel)\n        {\n          setSelectedParcel(parcel)\n        }\n        else\n        {\n          setSelectedParcel(null)\n        }\n\n        drawParcels()\n\n      })\n\n  }, [\n    canvasRef.current,\n    parcelBounds,\n    parcelSize,\n    setSelectedParcel,\n  ])\n\n  React.useEffect(function setCanvasContext() {\n\n    const canvas = canvasRef.current;\n\n    const contextSettings: CanvasRenderingContext2DSettings = {\n      // alpha: false,\n      // colorSpace: PredefinedColorSpace,\n      desynchronized: false,\n      willReadFrequently: false,\n    }\n\n    let context: CanvasRenderingContext2D|null;\n\n    if(canvas === null) {\n\n      setContext(null)\n\n    } else {\n\n      context = canvas.getContext(\n        '2d',\n        contextSettings\n      ) as CanvasRenderingContext2D\n\n      setContext(context)\n    }\n\n  }, [\n    canvasRef.current,\n    setContext,\n  ])\n\n  React.useEffect(\n    drawParcels,\n    [\n      context,\n      size,\n      parcelSize,\n      parcelBounds[0].x,\n      parcelBounds[0].y,\n    ]\n  )\n\n  return (\n    <nav className=\"CanvasParcelGrid\" data-testid=\"CanvasParcelGrid\">\n\n      <canvas ref={canvasRef}\n        width={size.width} height={size.height}\n        onMouseMove={(e) => handleMouseMove(e)}\n        className={css({\n          position: `fixed`,\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          zIndex: -1,\n          backgroundColor: `black`,\n          width: `${size.width}px`,\n          height: `${size.height}px`,\n          '&:hover': {\n            cursor: `pointer`,\n          },\n        })} />\n\n\t  </nav>\n  )\n\n}\n\nexport default CanvasParcelGrid;\n","import { Parcel } from '../types/parcel'\n\nimport { Color } from '../types/color'\nimport { Coordinate } from '../types/coordinate'\n\nimport { DAOContractAddress } from '../constants/DAOContractAddress'\n\nimport { Block } from '../hooks/use-parcel-block'\n\nimport AppConfig from '../config/app-config'\n\nfunction address(parcel: Parcel) {\n\treturn (parcel.estate ? parcel.estate : parcel).owner.address\n}\n\nfunction short(address: string) {\n\treturn `${address.slice(0, 5)}…${address.slice(address.length - 4)}`\n}\n\nfunction getBlockCoordinate(\n\tparcelX: number,\n\tparcelY: number): Coordinate\n{\n\treturn {\n\t\tx: parcelX - (parcelX % AppConfig.ParcelBlockWidth),\n\t\ty: parcelY - (parcelY % AppConfig.ParcelBlockWidth),\n\t}\n}\n\nfunction findParcel(\n\tblock: Block,\n\tx: number,\n\ty: number): Parcel|undefined\n{\n\treturn block?.parcels.find(\n\t\tp => parseInt(p.x) === x && parseInt(p.y) === y\n\t)\n}\n\nfunction getParcelSaturation(\n\tparcel: Parcel,\n\tselectedParcel: Parcel|null): number\n{\n\tif(\n\t\tselectedParcel &&\n\t\thasSameOwner(parcel, selectedParcel) === false\n\t)\n\t{\n\t\treturn 0.05\n\t}\n\n\treturn 1.00\n}\n\nfunction getParcelColor(\n\tparcel: Parcel,\n\tselectedParcel: Parcel|null,\n\taddress: string): Color\n{\n\tif (address === DAOContractAddress) {\n\t\treturn [0, 0, 0, 255]\n\t}\n\n\t//    0            12           24           36\n\t// 0x 9a6ebe7e2a77 22f8200d0ffb 63a1f6406a0d 7dce\n\n\taddress = address.slice(2)\n\n\tlet r = parseInt(address.slice(0, 12), 16) % 256\n\tlet g = parseInt(address.slice(12, 24), 16) % 256\n\tlet b = parseInt(address.slice(24, 36), 16) % 256\n\tlet a = 255\n\n\treturn [r, g, b, a]\n}\n\nfunction hasSameOwner(\n\tparcel: Parcel,\n\tselectedParcel: Parcel): boolean\n{\n\n\tif (selectedParcel.estate || parcel.estate)\n\t{\n\t\tif(selectedParcel.estate && parcel.estate)\n\t\t{\n\t\t\tif(selectedParcel.estate.owner.address === parcel.estate.owner.address)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\telse if(selectedParcel.estate)\n\t\t{\n\t\t\tif(selectedParcel.estate.owner.address === parcel.owner.address)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\telse if(selectedParcel.owner.address === parcel.estate?.owner.address)\n\t\t{\n\t\t\treturn true\n\t\t}\n\t} else if (parcel.owner.address === selectedParcel.owner.address) {\n\t\treturn true\n\t}\n\n\treturn false\n\n}\n\nexport {\n\taddress,\n\tshort,\n\tgetParcelSaturation,\n\tgetParcelColor,\n\thasSameOwner,\n\tgetBlockCoordinate,\n\tfindParcel,\n}\n","export const DAOContractAddress = `0x9a6ebe7e2a7722f8200d0ffb63a1f6406a0d7dce`\n\n// const ETH_DEAD_ADDRESS = `0x000000000000000000000000000000000000dEaD`\n","import React from 'react'\n\nimport { css } from '@emotion/css'\n\nimport { Parcel } from '../../types/parcel'\nimport { Coordinate } from '../../types/coordinate'\n\nimport AppConfig from '../../config/app-config'\n\nimport useScreenDimensions from '../../hooks/use-screen-dimensions'\nimport useMousewheelScalable from '../../hooks/use-mousewheel-scalable'\nimport useControlledCoordinate from '../../hooks/use-controlled-coordinate'\n\nimport CanvasParcelGrid from '../CanvasParcelGrid/CanvasParcelGrid'\n\nimport './App.css'\n\nfunction App() {\n\tconst screenDimensions = useScreenDimensions()\n\tconst parcelCellSize = useMousewheelScalable(AppConfig.ParcelPixelWidth, {\n\t\tdelta: 4,\n\t\tminValue: AppConfig.ParcelPixelMinWidth,\n\t\tmaxValue: AppConfig.ParcelPixelMaxWidth,\n\t})\n\tconst origin = useControlledCoordinate(AppConfig.Origin)\n\n\tconst parcelBounds: Coordinate[] = [\n\t\torigin,\n\t\t{\n\t\t\tx: origin.x + Math.sqrt(AppConfig.ParcelsPerQuery),\n\t\t\ty: origin.y - Math.sqrt(AppConfig.ParcelsPerQuery),\n\t\t},\n\t]\n\n\tconst [selectedParcel, setSelectedParcel] = React.useState<Parcel|null>(null)\n\n\treturn (\n\t\t<main className={css({\n\t\t\tcolor: `white`\n\t\t})}>\n\n\t\t\t<CanvasParcelGrid\n\t\t\t\tsize={screenDimensions}\n\t\t\t\tparcelBounds={parcelBounds}\n\t\t\t\tparcelSize={parcelCellSize}\n\t\t\t\tselectedParcel={selectedParcel}\n\t\t\t\tsetSelectedParcel={setSelectedParcel}>\n\t\t\t</CanvasParcelGrid>\n\n\t\t</main>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App/App'\nimport reportWebVitals from './reportWebVitals'\n\nimport localForage from 'localforage'\n\nimport {\n\tpersistCache,\n\tLocalForageWrapper\n} from 'apollo3-cache-persist'\n\nimport {\n\tApolloClient,\n\tInMemoryCache,\n\tApolloProvider,\n} from '@apollo/client'\n\nasync function getClient() {\n\tconst cache = new InMemoryCache({\n\t\ttypePolicies: {\n\t\t\tParcel: {\n\t\t\t\tkeyFields: ['x', 'y']\n\t\t\t},\n\t\t}\n\t})\n\n\tlocalForage.config({\n\t\tname: 'metestates',\n\t\tstoreName: 'keyvaluepairs',\n\t\tdescription: 'Local storage for the Metestates web app.'\n\t})\n\n\t// await persistCache({\n\t// \tcache: cache,\n\t// \tstorage: new LocalForageWrapper(localForage),\n\t// })\n\n\tconst client = new ApolloClient({\n\t\t// https://api.decentraland.org/v1/tiles\n\t\turi: `https://api.thegraph.com/subgraphs/name/decentraland/marketplace`,\n\t\tcache: cache,\n\t\t// name: `Metestates`,\n\t\t// version: `0.1.0`,\n\t})\n\n\treturn client\n}\n\nasync function init() {\n\n\tconst client = await getClient()\n\n\tReactDOM.render(\n\n\t\t(\n\t\t\t<React.StrictMode>\n\t\t\t\t<ApolloProvider client={client}>\n\t\t\t\t\t<App />\n\t\t\t\t</ApolloProvider>\n\t\t\t</React.StrictMode>\n\t\t),\n\n\t\tdocument.getElementById('root')\n\n\t)\n\n\t// If you want to start measuring performance in your app, pass a function\n\t// to log results (for example: reportWebVitals(console.log))\n\t// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\treportWebVitals()\n\n}\n\ninit()\n"],"sourceRoot":""}